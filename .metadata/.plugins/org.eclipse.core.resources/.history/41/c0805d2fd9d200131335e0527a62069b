package upload;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.Text;

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;


/*
 *		Class fileUploader
 * 
 *		@desc Reads all the files in <<InputFolder>> and uploads them to HDS in <<OutputFolder>>
 *		@author Vicente Ruben Del Pino Ruiz <<ruben.delpino@gmail.com>>
 *
 */



public class fileUploader {
	
	
	//Input folder with files to upload
	//Output folder where upload the files (in HDFS)
	String OutputFolder;
	String InputFolder;
	
	
	//Cluster configuration 
	Configuration conf;
	FileSystem fs;
	
	
	//Variables needed for reading the files in the folder
	String currentFile;
	FileReader fileReader;
	BufferedReader bufferedReader;
	String content;
	
	
	public fileUploader(){
		
		try{
			//Open configuration for cluster
			conf= new Configuration();
			fs = FileSystem.get(conf);
		}
		catch (Exception IOException){
			System.out.println("Error reading configuration from cluster and setting Filesystem: "+IOException.getMessage());
		}
		
	}
	
	public fileUploader(String Folder){
		

		
		//Reset content
		content="";
		
		
		//Open the folder and take all the files inside
		File folder = new File(inputFolder);
		File [] listofFiles= folder.listFiles();
		
	
		//Key and value to be written in the file
		Text key = new Text();
		Text value = new Text();
		
		//Open the sequence file
		Path outputPath = new Path(outputFile);
		@SuppressWarnings("deprecation")
		SequenceFile.Writer fileOutput = new SequenceFile.Writer(fs, conf, outputPath, org.apache.hadoop.io.Text.class, org.apache.hadoop.io.Text.class);
		
		
		//Iterate for all the files of the input folder\
		for (File file: listofFiles){
			if (file.isFile()){
				
				//Read the file 
				currentFile=file.getName();
				fileReader =new FileReader(folder.getAbsolutePath()+"/"+currentFile);
				bufferedReader = new BufferedReader(fileReader);
				
				content="";
				
				while (bufferedReader.ready()){
					content+=bufferedReader.readLine();
				}
				
				
				//Write the content of the file to the sequence file
				key =new Text(currentFile);
				value=new Text(content);
				//Append the key value to the file
				fileOutput.append(key,value);
			}
		}
	
	
		//Close the sequence file
		fileOutput.close();	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			
		
		
		
		
		    
		    // Check if the file already exists
		    Path path = new Path("/path/to/file.ext");
		    if (fs.exists(path)) {
		        System.out.println("File " + dest + " already exists");
		        return;
		    }

		    // Create a new file and write data to it.
		    FSDataOutputStream out = fs.create(path);
		    InputStream in = new BufferedInputStream(new FileInputStream(
		        new File(source)));

		    byte[] b = new byte[1024];
		    int numBytes = 0;
		    while ((numBytes = in.read(b)) > 0) {
		        out.write(b, 0, numBytes);
		    }

		    // Close all the file descripters
		    in.close();
		    out.close();
		    fs.close();
		
	}
	
	
	
	
	
	
	
	

}
